{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/environment\";\nimport * as i2 from \"@angular/common/http\";\nexport class SettingsService {\n  constructor(globalEnv, http) {\n    this.globalEnv = globalEnv;\n    this.http = http;\n  }\n  updateData_noPassword(formData) {\n    const token = localStorage.getItem('token');\n    const headers = new HttpHeaders({\n      Authorization: `Bearer ${token}`\n    });\n    return this.http.post(this.globalEnv.url + 'Customer/editCustomer_noPassword', formData, {\n      headers: headers,\n      responseType: 'text'\n    });\n  }\n  getCustomerSettings() {\n    const token = localStorage.getItem('token');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    });\n    return this.http.get(this.globalEnv.url + 'Customer/getUserById', {\n      headers: headers\n    });\n  }\n  updateCustomerPassword(formData) {\n    const token = localStorage.getItem('token');\n    const headers = new HttpHeaders({\n      Authorization: `Bearer ${token}`\n    });\n    return this.http.post(this.globalEnv.url + 'Customer/editCustomerPassword', formData, {\n      headers: headers,\n      responseType: 'text'\n    });\n  }\n  static #_ = this.ɵfac = function SettingsService_Factory(t) {\n    return new (t || SettingsService)(i0.ɵɵinject(i1.GlobalEnvironment), i0.ɵɵinject(i2.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SettingsService,\n    factory: SettingsService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","SettingsService","constructor","globalEnv","http","updateData_noPassword","formData","token","localStorage","getItem","headers","Authorization","post","url","responseType","getCustomerSettings","get","updateCustomerPassword","_","i0","ɵɵinject","i1","GlobalEnvironment","i2","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["D:\\Angular\\CenterApp\\src\\app\\header-customer\\settings\\settings.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { GlobalEnvironment } from 'src/app/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SettingsService {\r\n  constructor(private globalEnv: GlobalEnvironment, private http: HttpClient) {}\r\n  public updateData_noPassword(formData: FormData): Observable<any> {\r\n    const token = localStorage.getItem('token');\r\n    const headers = new HttpHeaders({\r\n      Authorization: `Bearer ${token}`,\r\n    });\r\n    return this.http.post(\r\n      this.globalEnv.url + 'Customer/editCustomer_noPassword',\r\n      formData,\r\n      {\r\n        headers: headers,\r\n        responseType: 'text',\r\n      }\r\n    );\r\n  }\r\n  public getCustomerSettings(): Observable<any> {\r\n    const token = localStorage.getItem('token');\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${token}`\r\n\r\n    });\r\n    return this.http.get(this.globalEnv.url + 'Customer/getUserById',{\r\n      headers:headers, \r\n    })\r\n  }\r\n  public updateCustomerPassword(formData: FormData): Observable<any> {\r\n    const token = localStorage.getItem('token');\r\n    const headers = new HttpHeaders({\r\n      Authorization: `Bearer ${token}`,\r\n    });\r\n    return this.http.post(\r\n      this.globalEnv.url + 'Customer/editCustomerPassword',\r\n      formData,\r\n      {\r\n        headers: headers,\r\n        responseType: 'text',\r\n      }\r\n    );\r\n  }\r\n}\r\n"],"mappings":"AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;;;;AAQ9D,OAAM,MAAOC,eAAe;EAC1BC,YAAoBC,SAA4B,EAAUC,IAAgB;IAAtD,KAAAD,SAAS,GAATA,SAAS;IAA6B,KAAAC,IAAI,GAAJA,IAAI;EAAe;EACtEC,qBAAqBA,CAACC,QAAkB;IAC7C,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMC,OAAO,GAAG,IAAIV,WAAW,CAAC;MAC9BW,aAAa,EAAE,UAAUJ,KAAK;KAC/B,CAAC;IACF,OAAO,IAAI,CAACH,IAAI,CAACQ,IAAI,CACnB,IAAI,CAACT,SAAS,CAACU,GAAG,GAAG,kCAAkC,EACvDP,QAAQ,EACR;MACEI,OAAO,EAAEA,OAAO;MAChBI,YAAY,EAAE;KACf,CACF;EACH;EACOC,mBAAmBA,CAAA;IACxB,MAAMR,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMC,OAAO,GAAG,IAAIV,WAAW,CAAC;MAC9B,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAE,UAAUO,KAAK;KAEjC,CAAC;IACF,OAAO,IAAI,CAACH,IAAI,CAACY,GAAG,CAAC,IAAI,CAACb,SAAS,CAACU,GAAG,GAAG,sBAAsB,EAAC;MAC/DH,OAAO,EAACA;KACT,CAAC;EACJ;EACOO,sBAAsBA,CAACX,QAAkB;IAC9C,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMC,OAAO,GAAG,IAAIV,WAAW,CAAC;MAC9BW,aAAa,EAAE,UAAUJ,KAAK;KAC/B,CAAC;IACF,OAAO,IAAI,CAACH,IAAI,CAACQ,IAAI,CACnB,IAAI,CAACT,SAAS,CAACU,GAAG,GAAG,+BAA+B,EACpDP,QAAQ,EACR;MACEI,OAAO,EAAEA,OAAO;MAChBI,YAAY,EAAE;KACf,CACF;EACH;EAAC,QAAAI,CAAA,G;qBAxCUjB,eAAe,EAAAkB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,iBAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAfxB,eAAe;IAAAyB,OAAA,EAAfzB,eAAe,CAAA0B,IAAA;IAAAC,UAAA,EAFd;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}