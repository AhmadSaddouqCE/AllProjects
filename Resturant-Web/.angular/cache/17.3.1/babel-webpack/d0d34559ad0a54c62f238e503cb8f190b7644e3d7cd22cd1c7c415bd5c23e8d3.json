{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"src/app/environment\";\nexport class ShoppingServices {\n  constructor(http, globalEnv) {\n    this.http = http;\n    this.globalEnv = globalEnv;\n  }\n  getCustomerCarts() {\n    const token = localStorage.getItem('token');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    });\n    return this.http.get(this.globalEnv.url + 'Cart/getUserCarts', {\n      headers\n    });\n  }\n  deleteCustomerCart(cartId) {\n    const token = localStorage.getItem('token');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    });\n    return this.http.delete(`${this.globalEnv.url}Cart/DeleteFromCart/${cartId}`, {\n      headers: headers,\n      responseType: 'text'\n    });\n  }\n  editCustomerCartQuantity(form) {\n    const token = localStorage.getItem('token');\n    const headers = new HttpHeaders({\n      Authorization: `Bearer ${token}`\n    });\n    return this.http.post(this.globalEnv.url + 'Cart/editCartQuantity', form, {\n      headers,\n      responseType: 'text'\n    });\n  }\n  addOrder() {\n    const token = localStorage.getItem('token');\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    });\n    return this.http.post(this.globalEnv.url + 'Order/AddOrder', null, {\n      headers: headers,\n      responseType: 'text'\n    });\n  }\n  static #_ = this.ɵfac = function ShoppingServices_Factory(t) {\n    return new (t || ShoppingServices)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.GlobalEnvironment));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ShoppingServices,\n    factory: ShoppingServices.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","ShoppingServices","constructor","http","globalEnv","getCustomerCarts","token","localStorage","getItem","headers","Authorization","get","url","deleteCustomerCart","cartId","delete","responseType","editCustomerCartQuantity","form","post","addOrder","_","i0","ɵɵinject","i1","HttpClient","i2","GlobalEnvironment","_2","factory","ɵfac","providedIn"],"sources":["D:\\Angular\\CenterApp\\src\\app\\header-customer\\shopping-cart\\Shopping.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { GlobalEnvironment } from 'src/app/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ShoppingServices {\r\n\r\n  constructor(private http: HttpClient, private globalEnv: GlobalEnvironment) {}\r\n  getCustomerCarts(): Observable<any[]> {\r\n    const token = localStorage.getItem('token');\r\n\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      Authorization: `Bearer ${token}`,\r\n    });\r\n    return this.http.get<any[]>(this.globalEnv.url + 'Cart/getUserCarts', {\r\n      headers,\r\n    });\r\n  }\r\n  deleteCustomerCart(cartId: number): Observable<any> {\r\n    const token = localStorage.getItem('token');\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      Authorization: `Bearer ${token}`,\r\n    });\r\n    return this.http.delete(\r\n      `${this.globalEnv.url}Cart/DeleteFromCart/${cartId}`,\r\n      { headers: headers, responseType: 'text' }\r\n    );\r\n  }\r\n  editCustomerCartQuantity(form: FormData) {\r\n    const token = localStorage.getItem('token');\r\n    const headers = new HttpHeaders({\r\n      Authorization: `Bearer ${token}`,\r\n    });\r\n    return this.http.post(this.globalEnv.url + 'Cart/editCartQuantity', form, {\r\n      headers, responseType:'text'\r\n    })\r\n  }\r\n  addOrder(){\r\n    const token = localStorage.getItem('token');\r\n    const headers = new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      Authorization: `Bearer ${token}`,\r\n    })\r\n    return this.http.post(this.globalEnv.url + 'Order/AddOrder',null, {\r\n     headers:headers, responseType:'text'\r\n    })\r\n  }\r\n}\r\n"],"mappings":"AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;;;;AAQ9D,OAAM,MAAOC,gBAAgB;EAE3BC,YAAoBC,IAAgB,EAAUC,SAA4B;IAAtD,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,SAAS,GAATA,SAAS;EAAsB;EAC7EC,gBAAgBA,CAAA;IACd,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAE3C,MAAMC,OAAO,GAAG,IAAIT,WAAW,CAAC;MAC9B,cAAc,EAAE,kBAAkB;MAClCU,aAAa,EAAE,UAAUJ,KAAK;KAC/B,CAAC;IACF,OAAO,IAAI,CAACH,IAAI,CAACQ,GAAG,CAAQ,IAAI,CAACP,SAAS,CAACQ,GAAG,GAAG,mBAAmB,EAAE;MACpEH;KACD,CAAC;EACJ;EACAI,kBAAkBA,CAACC,MAAc;IAC/B,MAAMR,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMC,OAAO,GAAG,IAAIT,WAAW,CAAC;MAC9B,cAAc,EAAE,kBAAkB;MAClCU,aAAa,EAAE,UAAUJ,KAAK;KAC/B,CAAC;IACF,OAAO,IAAI,CAACH,IAAI,CAACY,MAAM,CACrB,GAAG,IAAI,CAACX,SAAS,CAACQ,GAAG,uBAAuBE,MAAM,EAAE,EACpD;MAAEL,OAAO,EAAEA,OAAO;MAAEO,YAAY,EAAE;IAAM,CAAE,CAC3C;EACH;EACAC,wBAAwBA,CAACC,IAAc;IACrC,MAAMZ,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMC,OAAO,GAAG,IAAIT,WAAW,CAAC;MAC9BU,aAAa,EAAE,UAAUJ,KAAK;KAC/B,CAAC;IACF,OAAO,IAAI,CAACH,IAAI,CAACgB,IAAI,CAAC,IAAI,CAACf,SAAS,CAACQ,GAAG,GAAG,uBAAuB,EAAEM,IAAI,EAAE;MACxET,OAAO;MAAEO,YAAY,EAAC;KACvB,CAAC;EACJ;EACAI,QAAQA,CAAA;IACN,MAAMd,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,MAAMC,OAAO,GAAG,IAAIT,WAAW,CAAC;MAC9B,cAAc,EAAE,kBAAkB;MAClCU,aAAa,EAAE,UAAUJ,KAAK;KAC/B,CAAC;IACF,OAAO,IAAI,CAACH,IAAI,CAACgB,IAAI,CAAC,IAAI,CAACf,SAAS,CAACQ,GAAG,GAAG,gBAAgB,EAAC,IAAI,EAAE;MACjEH,OAAO,EAACA,OAAO;MAAEO,YAAY,EAAC;KAC9B,CAAC;EACJ;EAAC,QAAAK,CAAA,G;qBA3CUpB,gBAAgB,EAAAqB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,iBAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAhB3B,gBAAgB;IAAA4B,OAAA,EAAhB5B,gBAAgB,CAAA6B,IAAA;IAAAC,UAAA,EAFf;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}